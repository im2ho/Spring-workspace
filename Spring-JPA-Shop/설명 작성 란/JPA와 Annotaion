Annotation(어노테이션)
	- JDK(개발도구)5부터 등장한 개념으로, 사전적 의미로 '주석'이라는 뜻을 가지고있다.
	- 메타데이터라고도 불리는데, 데이터를 위한 데이터라는 뜻.
	- 클래스나 메서드, 변수 등을 선언할 때 @을 붙여서 사용
	
==========================================================================

JPA(Java Persistence API)
	- 자바에서 관계형 데이터베이스와 상호작용을 위해 기능을 따로 작성하지 않고, 축소시켜서 사용하는 기술
	- ORM 기술 표준으로 사용되는 '인터페이스'의 모음. 즉, 구현된 클래스와 매핑을 해주기 위해 사용되는 놈.
	- Java 어플리케이션에서 RDB를 어떻게 사용해야 하는지 정의하는 한 방법 (단순한 기술 명세일 뿐, 라이브러리처럼 어떤 기능을 하는 것이 X)
	- JPA를 구현한 대표적인 오픈소스로는 Hibernate가 있다
	
	< 장점 >
		1. 특정 DB에 종속되지 않음
			ex) 오라클 db 사용 중, MariaDB로 변경할시 DB마다 다른 쿼리문에 인해 전체 수정 필요
				but JPA는 추상화한 데이터 접근 계층을 제공하기 때문에, 설정 파일(application properties)에서
				어떤 db를 사용하는지만 재설정해주면 해결
		
		2. 객체지향적 프로그래밍
			JPA 데이터베이스 설계 중심으로 객체지향적 설계 가능
		
		3. 생산성 향상
			ex) 데이터베이스 테이블에 새로운 컬럼이 추가되었을 경우
				- JPA 사용 전 : 해당 테이블의 컬럼을 사용하는 DTO 클래스의 필드를 모두 변경
				- JPA 사용 후 : 
		
	< 단점 >
		1. 복잡한 쿼리 처리에 어려움
		
		2. 학습시간
			세부적으로 미세하게 메모리 시간이 소요됨
		
		3. 
==========================================================================
	
ORM(Object-Relational Mapping)
	- Java Class와 관계형 데이터베이스에 있는 테이블과 변수들을 매핑(연결)해주는 것
	- 어플리케이션의 객체를 RDB 테이블에 자동으로 영속화? 해주는 것
	- SQL문이 아닌 Method를 통해 DB 조작 가능 
	
	
==========================================================================

LOMBOK(라이브러리)
	- Getter/Setter, ToString과 같이 반복적인 자바 코드를 작성해야 할 때, 자동으로 축소해서 생성해주는 라이브러리
	ex)
		롬복 사용 전
			public void getId(){}
			public int setId(){} ...와 같이 메서드로 작성
		
		롬복 사용 후
			@Getter/Setter 작성으로 코드 단축 가능 ㄷㄷ
			
			++++++++++ 그 외 ++++++++++
			
			@NotNull
				해당 변수가 null인지 체크
				
			@EqualsAndHashCode
				객체가 동등한지 비교
				자동으로 equals()와 hashCode() 메서드를 생성해줌
				
			@RequiredArg-sConstructor
				필드 중 final이나 @NonNull로 선언된 필드를 대상으로 생성자 생성
				이때 만들어진 생성자는 필드를 초괴화하는 목적으로 사용됨
				
				
			@Data : 
				@ToString, @EqualsAndHashCode, @Getter, @Setter, @RequiredArg-sConstructor
				모두를 합친 어노테이션
			
			@Entity(엔티티)
				데이터베이스의 테이블에 대응하는 클래스
				@Entity가 붙은 클래스는 JPA에서 관리하게 됨
				
				ex)
					데이터베이스에 item 테이블을 만들고, 이에 대응되는 Item.java 만들어서
					@Entity 어노테이션을 붙이며 어노테이션이 붙은 클래스가 엔티티가 됨